[build-system]
requires = ["scikit-build-core>=0.10.1", "setuptools-scm>=8.1", "pybind11>=2.13.5"]
build-backend = "scikit_build_core.build"

[project]
name = "mqt-core"
description = "The Backbone of the Munich Quantum Toolkit"
readme = "README.md"
authors = [
    { name = "Lukas Burgholzer", email = "burgholzer@me.com" }
]
keywords = ["MQT", "quantum-computing", "design-automation", "decision-diagrams", "zx-calculus"]
license = { file = "LICENSE.md" }

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: C++",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
  "Typing :: Typed",
]
requires-python = ">=3.9"
dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest>=7.2", "pytest-console-scripts>=1.4", "mqt.core[qiskit, evaluation]"]
coverage = ["mqt.core[test]", "pytest-cov>=4"]
evaluation = [
    "pandas[output-formatting]>=2.1.2",
]
docs = [
  "furo>=2023.9.10",
  "mqt.core[qiskit,evaluation]",
  "myst_nb>=1.1.0",
  "qiskit[visualization]",
  "setuptools-scm>=8.1",
  "sphinx_design>=0.6",
  "sphinx-autoapi>=3",
  "sphinx-copybutton>=0.5",
  "sphinxcontrib-bibtex>=2.4.2",
  "sphinxcontrib-svg2pdfconverter>=1.2",
  "sphinxext-opengraph>=0.9",
]
qiskit = [
   "qiskit[qasm3-import]>=1.0.0",
]
dev = ["mqt.core[coverage, docs]",]

[project.scripts]
mqt-core-dd-compare = "mqt.core.dd.evaluation:main"

[project.urls]
Homepage = "https://github.com/cda-tum/mqt-core"
Documentation = "https://mqt.readthedocs.io/projects/core"
Issues = "https://github.com/cda-tum/mqt-core/issues"
Discussions = "https://github.com/cda-tum/mqt-core/discussions"


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "build-system.requires"

# Set the wheel install directory
wheel.install-dir = "mqt/core"

# Set required Ninja version
ninja.version = ">=1.10"

# Setuptools-style build caching in a local directory
build-dir = "build/{build_type}"

# Explicitly set the package directory
wheel.packages = ["src/mqt"]

# Only build the Python bindings target
build.targets = ["ir"]

# Only install the Python package component
install.components = ["mqt-core_Python"]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/mqt/core/_version.py"]
sdist.exclude = [
    "**/.github",
    "**/doc",
    "**/docs",
    "**/meta",
    "**/plots",
    "**/test",
    "**/tests",
]

[tool.check-sdist]
sdist-only = ["src/mqt/core/_version.py"]
git-only = [
    "docs/*",
    "test/*",
]

[tool.scikit-build.cmake.define]
BUILD_MQT_CORE_BINDINGS = "ON"
BUILD_MQT_CORE_TESTS = "OFF"

[[tool.scikit-build.overrides]]
if.python-version = ">=3.13"
if.abi-flags = "t"
if.platform-system = "win32"
inherit.cmake.define = "append"
cmake.define.DISABLE_GIL = "1"


[tool.setuptools_scm]
write_to = "src/mqt/core/_version.py"


[tool.pytest.ini_options]
minversion = "7.2"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:\s.*Pyarrow.*:DeprecationWarning:',
    'ignore:.*datetime\.datetime\.utcfromtimestamp.*:DeprecationWarning:',
    'ignore:.*no need for these schema-conformant objects.*:DeprecationWarning:', # Qiskit itself imports deprecated code (should be resolved in the 1.2.1 release)
]
log_cli_level = "info"
testpaths = ["test/python"]


[tool.coverage]
run.source = ["mqt.core"]
run.omit = [
    '*/_compat/*',
]
report.exclude_also = [
    '\.\.\.',
    'if TYPE_CHECKING:',
    'raise AssertionError',
    'raise NotImplementedError',
]


[tool.mypy]
files = ["src/mqt", "test/python", "noxfile.py"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/src"]
python_version = "3.9"
warn_unused_configs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["qiskit.*", "matplotlib.*", "pytest_console_scripts.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
preview = true
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "FLY",         # flynt
    "FURB",        # refurb
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "LOG",         # flake8-logging-format
    "N",           # flake8-naming
    "NPY",         # numpy
    "PD",          # pandas-vet
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "S",           # flake8-bandit
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "TCH",         # flake8-type-checking
    "TID251",      # flake8-tidy-imports.banned-api
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ISC001",  # Conflicts with formatter
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "PT004",   # Incorrect, just usefixtures instead.
    "S101",    # Use of assert detected
    "S404",    # `subprocess` module is possibly insecure
]
typing-modules = ["mqt.core._compat.typing"]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"typing.Self".msg = "Use mqt.core._compat.typing.Self instead."
"typing_extensions.Self".msg = "Use mqt.core._compat.typing.Self instead."
"typing.assert_never".msg = "Use mqt.core._compat.typing.assert_never instead."

[tool.ruff.lint.per-file-ignores]
"test/python/**" = ["T20", "ANN"]
"docs/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D418", "PYI021"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]
"src/mqt/core/_compat/**.py" = ["TID251"]
"src/mqt/core/dd/evaluation.py" = ["T201"]
"src/mqt/core/__main__.py" = ["T201"]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.typos]
default.extend-ignore-re = [
  "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$",  # ignore line
  "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on" # ignore block
]
[tool.typos.default.extend-words]
wille = "wille"
anc = "anc"
mch = "mch"


[tool.repo-review]
ignore = ["GH200"]


[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux_*"
archs = "auto64"
test-command = "python -c \"from mqt import core\""
build-frontend = "build[uv]"
free-threaded-support = true
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-ppc64le-image = "manylinux_2_28"
manylinux-s390x-image = "manylinux_2_28"

[tool.cibuildwheel.linux]
environment = { DEPLOY = "ON" }

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15" }

[tool.cibuildwheel.windows]
before-build = "uv pip install delvewheel>=1.7.3"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --namespace-pkg mqt"
environment = { CMAKE_GENERATOR = "Ninja", SKBUILD_CMAKE_ARGS="--fresh" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }


[tool.uv]
reinstall-package = ["mqt-core"]
