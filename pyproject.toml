[build-system]
requires = ["scikit-build-core>=0.5.0", "setuptools-scm>=7", "pybind11>=2.11"]
build-backend = "scikit_build_core.build"

[project]
name = "mqt-core"
description = "The Backbone of the Munich Quantum Toolkit"
readme = "README.md"
authors = [
    { name = "Lukas Burgholzer", email = "burgholzer@me.com" }
]
keywords = ["MQT", "quantum-computing", "design-automation", "decision-diagrams", "zx-calculus"]
license = { file = "LICENSE.md" }

classifiers = [
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 4 - Beta",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest>=7.0", "mqt.core[qiskit]"]
coverage = ["mqt.core[test]", "pytest-cov"]
docs = [
    "furo>=2023.08.17",
    "sphinx",
    "myst_parser>=0.13",
    "setuptools-scm>=7",
    "sphinx-copybutton",
    "sphinx_design",
    "sphinxext-opengraph",
    "sphinxcontrib-bibtex>=2.4.2",
    "pybtex>=0.24",
    "ipython",
    "ipykernel",
    "nbsphinx",
    "sphinx-autodoc-typehints",
    "sphinx-autoapi",
    "qiskit-terra[visualization]"
]
qiskit = [
   "qiskit-terra>=0.22.0",
]
dev = ["mqt.core[coverage, docs]",]

[project.urls]
Homepage = "https://github.com/cda-tum/mqt-core"
Documentation = "https://mqt.readthedocs.io/projects/core"
Issues = "https://github.com/cda-tum/mqt-core/issues"
Discussions = "https://github.com/cda-tum/mqt-core/discussions"


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.5.0"

# Set the target to build
cmake.targets = ["_core"]

# Set required CMake and Ninja versions
cmake.minimum-version = "3.19"
ninja.minimum-version = "1.10"

# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

# Build stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"

# Explicitly set the package directory
wheel.packages = ["src/mqt"]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/mqt/core/_version.py"]
sdist.exclude = [
    "**/.github",
    "**/doc",
    "**/docs",
    "**/meta",
    "**/plots",
    "**/test",
    "**/tests",
    "extern/json/include",
    "extern/googletest",
    "extern/boost/config/checks",
    "extern/boost/config/tools",
    "extern/boost/multiprecision/config",
    "extern/boost/multiprecision/example",
    "extern/boost/multiprecision/performance",
    "extern/boost/multiprecision/tools"
]

[tool.check-sdist]
sdist-only = ["src/mqt/core/_version.py"]
git-only = [
    "docs/*",
    "extern/*",
    "test/*",
]

[tool.scikit-build.cmake.define]
BUILD_MQT_CORE_BINDINGS = "ON"
BUILD_MQT_CORE_TESTS = "OFF"
ENABLE_IPO = "ON"


[tool.setuptools_scm]
write_to = "src/mqt/core/_version.py"


[tool.black]
line-length = 120


[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error", 'ignore:.*qiskit.__qiskit_version__.*:DeprecationWarning:qiskit:']
log_cli_level = "info"
testpaths = ["test/python"]


[tool.coverage]
run.source = ["mqt.core"]
run.omit = [
    'src/mqt/core/_compat/*',
]
report.exclude_also = [
    '\.\.\.',
    'if TYPE_CHECKING:',
    'raise AssertionError',
    'raise NotImplementedError',
]


[tool.mypy]
files = ["src/mqt", "test/python"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/src"]
python_version = "3.8"
warn_unused_configs = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["qiskit.*", "matplotlib.*"]
ignore_missing_imports = true

[tool.ruff]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
select = [
    "E", "F", "W", # flake8
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "FLY",         # flynt
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "N",           # flake8-naming
    "NPY",         # numpy
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "TCH",         # flake8-type-checking
    "TID251",      # flake8-tidy-imports.banned-api
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
extend-ignore = [
    "E501",    # Line too long (Black is enough)
    "PLR",     # Design related pylint codes
]
typing-modules = ["mqt.core._compat.typing"]
src = ["src"]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
line-length = 120

[tool.ruff.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"typing.Self".msg = "Use scikit_build_core._compat.typing.Self instead."
"typing_extensions.Self".msg = "Use scikit_build_core._compat.typing.Self instead."
"typing.assert_never".msg = "Use scikit_build_core._compat.typing.assert_never instead."
"importlib.resources".msg = "Use scikit_build_core._compat.importlib.resources instead."
"importlib_resources".msg = "Use scikit_build_core._compat.importlib.resources instead."

[tool.ruff.per-file-ignores]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]
"src/mqt/core/_compat/**.py" = ["TID251"]

[tool.ruff.pydocstyle]
convention = "google"


[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux_*"
archs = "auto64"
test-command = "python -c \"from mqt import core\""
build-frontend = "build"

[tool.cibuildwheel.linux]
environment = { DEPLOY = "ON" }

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15" }

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
environment = { CMAKE_GENERATOR = "Ninja" }
