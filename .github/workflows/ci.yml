name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name:  Configure CMake
        shell: bash
        run:   |
               if [ "$RUNNER_OS" == "Windows" ]; then
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -T "ClangCl" -DBUILD_QFR_TESTS=ON -DBINDINGS=ON
               else
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_QFR_TESTS=ON -DBINDINGS=ON
               fi

      - name:  Build
        shell: bash
        run:   cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name:  Configure CMake
        shell: bash
        run:   |
               if [ "$RUNNER_OS" == "Windows" ]; then
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -T "ClangCl" -DBUILD_QFR_TESTS=ON
               else
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_QFR_TESTS=ON
               fi

      - name:  Build
        shell: bash
        run:   cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE --target qfr_test

      - name:              Test
        working-directory: ${{github.workspace}}/build/test
        shell:             bash
        run:               |
                           if [ "$RUNNER_OS" == "Windows" ]; then
                             cd $BUILD_TYPE
                             ./qfr_test.exe
                           else
                             ./qfr_test
                           fi

  coverage:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name:  Configure CMake
        shell: bash
        run: cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=1 -DBUILD_QFR_TESTS=ON

      - name:  Build
        shell: bash
        run: cmake --build "${{github.workspace}}/build" --config Debug --target qfr_test

      - name:              Test
        working-directory: ${{github.workspace}}/build/test
        shell:             bash
        run:               ./qfr_test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true

  codestyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: DoozyX/clang-format-lint-action@v0.12
        with:
          source:             'include src test jkq/qfr'
          extensions:         'h,hpp,c,cpp'
          clangFormatVersion: 12
