name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  MAKEFLAGS: "-j2"

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name:  Configure CMake
        run:   |
               if [ "$RUNNER_OS" == "Windows" ]; then
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -T "ClangCl" -DBUILD_QFR_TESTS=ON -DBINDINGS=ON
               else
                 cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_QFR_TESTS=ON -DBINDINGS=ON
               fi
      - name:  Build
        run:   cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Configure CMake
        run: |
             if [ "$RUNNER_OS" == "Windows" ]; then
               cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -T "ClangCl" -DBUILD_QFR_TESTS=ON
             else
               cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_QFR_TESTS=ON
             fi
      - name: Build
        run: cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE --target qfr_test
      - name: Test
        working-directory: ${{github.workspace}}/build/test
        run: |
             if [ "$RUNNER_OS" == "Windows" ]; then
               cd $BUILD_TYPE && ./qfr_test.exe
             else
               ctest -C $BUILD_TYPE --output-on-failure
             fi

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Configure CMake
        run:  cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON -DBUILD_QFR_TESTS=ON
      - name: Build
        run:  cmake --build "${{github.workspace}}/build" --config Debug --target qfr_test
      - name:              Test
        working-directory: ${{github.workspace}}/build/test
        run:               ctest -C Debug --output-on-failure
      - name: Run gcov
        run:  |
              find . -type f -name '*.gcno' -exec gcov -p  {} +
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

  codestyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: DoozyX/clang-format-lint-action@v0.14
        with:
          source:             'apps include src test mqt/qfr'
          extensions:         'h,hpp,c,cpp'
          clangFormatVersion: 13
