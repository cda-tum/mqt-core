name: 🐍 • Packaging

on:
  workflow_call:
    inputs:
      pure-python:
        description: "Whether this is a pure Python package (or contains compiled extensions)"
        default: false
        type: boolean
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.11.2"
        type: string

jobs:
  build_sdist:
    name: 📦 SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Build SDist
        run: pipx run build --sdist
      - name: Check metadata
        run: pipx run twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  build_wheel:
    if: ${{ inputs.pure-python }}
    name: 🛞 Wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Build Wheel
        run: pipx run build --wheel
      - name: Check metadata
        run: pipx run twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheel
          path: dist/*.whl

  dist:
    if: ${{ !inputs.pure-python }}
    name: 📦 Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - if: ${{ inputs.setup-z3 }}
        name: Setup Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ inputs.z3-version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Set up mold as linker (Linux only)
        uses: rui314/setup-mold@v1
      - uses: hynek/build-and-inspect-python-package@v2
        id: baipp
        with:
          skip-wheel: "true"
      - name: 🐍 create identifiers for supported Python versions
        id: python-versions
        run: echo "python-versions=$(echo '${{ steps.baipp.outputs.supported_python_classifiers_json_array }}' | jq -c --raw-output 'map("cp" + . | gsub("\\."; ""))')" >> $GITHUB_OUTPUT
    outputs:
      python-versions: ${{ steps.python-versions.outputs.python-versions }}

  build_wheels:
    if: ${{ !inputs.pure-python }}
    needs: dist
    name: 🎡 ${{ matrix.runs-on }} ${{ matrix.python }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-latest, macos-13, macos-14, windows-latest]
        python: ${{ fromJson(needs.dist.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - uses: ilammy/msvc-dev-cmd@v1
      - if: ${{ inputs.setup-z3 }} && matrix.os != 'ubuntu-latest'
        name: Setup Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ inputs.z3-version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - if: ${{ inputs.setup-z3 }} && matrix.runs-on == 'ubuntu-latest'
        name: Set environment variables for Z3 installation in manylinux image
        run: |
          echo "CIBW_BEFORE_ALL_LINUX=/opt/python/cp311-cp311/bin/pip install z3-solver==${{ inputs.z3-version }}" >> $GITHUB_ENV
      - if: matrix.runs-on != 'ubuntu-latest'
        name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          prepend_symlinks_to_path: false
          windows_compile_environment: msvc
          override_cache_key: wheels-${{ matrix.runs-on }}-${{ matrix.python }}
      - uses: pypa/cibuildwheel@v2.17
        env:
          CIBW_BUILD: ${{ matrix.python }}-*
      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.runs-on }}-${{ matrix.python }}-${{ strategy.job-index }}
          path: wheelhouse/*.whl

  build_wheels_emulation:
    if: ${{ !inputs.pure-python }}
    needs: dist
    name: 🎡 ${{ matrix.arch }} ${{ matrix.python }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: ["s390x", "ppc64le", "aarch64"]
        python: ${{ fromJson(needs.dist.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - if: ${{ inputs.setup-z3 }}
        name: Set environment variables for Z3 installation in manylinux image
        run: |
          echo "CIBW_BEFORE_ALL_LINUX=/opt/python/cp311-cp311/bin/pip install z3-solver==${{ inputs.z3-version }}" >> $GITHUB_ENV
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.python }}-*
          CIBW_TEST_SKIP: "cp*"
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.arch }}-${{ matrix.python }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
