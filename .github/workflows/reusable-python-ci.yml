name: üêç ‚Ä¢ CI

on:
  workflow_call:
    secrets:
      token:
        description: "The token to use for Codecov"
        required: true
    inputs:
      setup-z3:
        description: "Whether to set up Z3"
        default: false
        type: boolean
      z3-version:
        description: "The version of Z3 to set up"
        default: "4.11.2"
        type: string

jobs:
  lint:
    name: üö® Lint
    uses: ./.github/workflows/reusable-python-linter.yml
    with:
      setup-z3: ${{ inputs.setup-z3 }}
      z3-version: ${{ inputs.z3-version }}

  dist:
    name: üì¶ Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - if: ${{ inputs.setup-z3 }}
        name: Setup Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ inputs.z3-version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Set up mold as linker (Linux only)
        uses: rui314/setup-mold@v1
      - uses: hynek/build-and-inspect-python-package@v2
        id: baipp
      - name: üêç Determine maximum supported Python version
        run: echo "max-python-version=$(echo '${{ steps.baipp.outputs.supported_python_classifiers_json_array }}' | jq --raw-output '.[-1]')" >> $GITHUB_OUTPUT
        id: max-python-version
    outputs:
      python-versions: ${{ steps.baipp.outputs.supported_python_classifiers_json_array }}
      max-python-version: ${{ steps.max-python-version.outputs.max-python-version }}

  python-tests-ubuntu:
    name: üêß ${{ matrix.python-version }}
    needs: dist
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.dist.outputs.python-versions) }}
    uses: ./.github/workflows/reusable-python-tests.yml
    with:
      runs-on: ubuntu-latest
      python-version: ${{ matrix.python-version }}
      setup-z3: ${{ inputs.setup-z3 }}
      z3-version: ${{ inputs.z3-version }}
    secrets:
      token: ${{ secrets.token }}

  python-tests-macos:
    name: üçé ${{ matrix.python-version }} ${{ matrix.runs-on }}
    needs: [dist]
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - ${{ fromJson(needs.dist.outputs.python-versions)[0] }}
          - ${{ needs.dist.outputs.max-python-version }}
        runs-on: [macos-13] # test Intel architecture
        include:
          - runs-on: macos-14 # test Apple Silicon architecture
            python-version: ${{ needs.dist.outputs.max-python-version }} # testing Apple Silicon on 3.8 is blocked by https://github.com/actions/setup-python/issues/808
    uses: ./.github/workflows/reusable-python-tests.yml
    with:
      runs-on: ${{ matrix.runs-on }}
      python-version: ${{ matrix.python-version }}
      setup-z3: ${{ inputs.setup-z3 }}
      z3-version: ${{ inputs.z3-version }}
    secrets:
      token: ${{ secrets.token }}

  python-tests-windows:
    name: üèÅ ${{ matrix.python-version }}
    needs: [dist]
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - ${{ fromJson(needs.dist.outputs.python-versions)[0] }}
          - ${{ needs.dist.outputs.max-python-version }}
    uses: ./.github/workflows/reusable-python-tests.yml
    with:
      runs-on: windows-latest
      python-version: ${{ matrix.python-version }}
      setup-z3: ${{ inputs.setup-z3 }}
      z3-version: ${{ inputs.z3-version }}
    secrets:
      token: ${{ secrets.token }}

  minimums:
    name: üîß Minimums
    needs: [dist]
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - ${{ fromJson(needs.dist.outputs.python-versions)[0] }}
          - ${{ needs.dist.outputs.max-python-version }}
    uses: ./.github/workflows/reusable-python-minimums.yml
    with:
      runs-on: ubuntu-latest
      python-version: ${{ matrix.python-version }}
      setup-z3: ${{ inputs.setup-z3 }}
      z3-version: ${{ inputs.z3-version }}
    secrets:
      token: ${{ secrets.token }}
