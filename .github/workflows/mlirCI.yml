name: MLIR Workflow
on:
  push:
    paths:
      - "mlir/**"
  pull_request:
    paths:
      - "mlir/**"
  workflow_call:
    inputs:
      runs-on:
        description: >
          The ubuntu runner image to use. Defaults to 'ubuntu-latest'.
          This can be any valid ubuntu runner image, such as 'ubuntu-22.04', 'ubuntu-24.04', or their ARM variants 'ubuntu-22.04-arm', 'ubuntu-24.04-arm'.
        default: "ubuntu-latest"
        type: string
      config:
        description: >
          The build type to use. Defaults to 'Release'.
          This can be any valid CMake build type, such as 'Debug' or 'Release'.
        default: "Release"
        type: string
      compiler:
        description: >
          The compiler to use. Defaults to 'gcc'.
          This can be 'gcc' or 'clang'.
          If 'gcc' is selected, this will use the default GCC compiler.
          If 'clang' is selected, this will use the default Clang compiler.
        default: "gcc"
        type: string
      cmake-args:
        description: >
          Additional arguments to pass to CMake. Defaults to an empty string.
          This can be any valid CMake argument, such as '-DBUILD_SHARED_LIBS=ON' or '-DMLIR_DIR=/path/to/mlir'.
        default: ""
        type: string
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  #  Commented this part out for the moment, I think it should be useful to update reusable-change-detection.yml in order
  #  to test for the mlir part of the project as well.
  #  change-detection:
  #    name: üîç Change
  #    uses: cda-tum/mqt-workflows/.github/workflows/reusable-change-detection.yml@v1.7

  cpp-test-mlir:
    name: üá®‚Äå Test MLIR
    #    needs: change-detection
    #    if: fromJSON(needs.change-detection.outputs.run-mlir-tests)
    #    uses: cda-tum/mqt-workflows/.github/workflows/reusable-cpp-ci.yml@v1.7
    runs-on: ubuntu-latest
    steps:
      - name: Install MLIR
        run: |
          sudo apt update
          sudo apt install -y mlir

      - name: Configure CMake for MLIR
        run: |
          cmake -G Ninja -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DMLIR_DIR=${MLIR_DIR} \
            -DLLVM_DIR=${LLVM_DIR} \
            -DBUILD_MQT_CORE_MLIR=ON

      - name: Build MLIR components
        run: cmake --build build --config Release
#      - name: Run MLIR Tests
#        run: TODO
