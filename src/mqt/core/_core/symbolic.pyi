from typing import Iterator, overload

class Expression:
    constant: float
    @overload
    def __add__(self, arg0: Expression) -> Expression: ...
    @overload
    def __add__(self, arg0: Term) -> Expression: ...
    @overload
    def __add__(self, arg0: float) -> Expression: ...
    def __eq__(self, arg0: object) -> bool: ...
    def __getitem__(self, arg0: int) -> Term: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, terms: list[Term], constant: float = 0.0) -> None: ...
    @overload
    def __init__(self, term: Term, constant: float = 0.0) -> None: ...
    @overload
    def __init__(self, constant: float) -> None: ...
    def __iter__(self) -> Iterator[Term]: ...
    def __len__(self) -> int: ...
    def __mul__(self, arg0: float) -> Expression: ...
    @overload
    def __radd__(self, arg0: Term) -> Expression: ...
    @overload
    def __radd__(self, arg0: float) -> Expression: ...
    def __rmul__(self, arg0: float) -> Expression: ...
    @overload
    def __rsub__(self, arg0: Term) -> Expression: ...
    @overload
    def __rsub__(self, arg0: float) -> Expression: ...
    def __rtruediv__(self, arg0: float) -> Expression: ...
    @overload
    def __sub__(self, arg0: Expression) -> Expression: ...
    @overload
    def __sub__(self, arg0: Term) -> Expression: ...
    @overload
    def __sub__(self, arg0: float) -> Expression: ...
    def __truediv__(self, arg0: float) -> Expression: ...
    def evaluate(self, assignment: dict[Variable, float]) -> float: ...
    def is_constant(self) -> bool: ...
    def is_zero(self) -> bool: ...
    def num_terms(self) -> int: ...
    @property
    def terms(self) -> list[Term]: ...

class Term:
    @overload
    def __init__(self, coefficient: float, variable: Variable) -> None: ...
    @overload
    def __init__(self, variable: Variable) -> None: ...
    def __mul__(self, arg0: float) -> Term: ...
    def __rmul__(self, arg0: float) -> Term: ...
    def __rtruediv__(self, arg0: float) -> Term: ...
    def __truediv__(self, arg0: float) -> Term: ...
    def add_coefficient(self, coeff: float) -> None: ...
    def evaluate(self, assignment: dict[Variable, float]) -> float: ...
    def has_zero_coefficient(self) -> bool: ...
    @property
    def coefficient(self) -> float: ...
    @property
    def variable(self) -> Variable: ...

class Variable:
    def __eq__(self, arg0: object) -> bool: ...
    def __gt__(self, arg0: Variable) -> bool: ...
    def __init__(self, name: str = "") -> None: ...
    def __lt__(self, arg0: Variable) -> bool: ...
    def __ne__(self, arg0: object) -> bool: ...
    @property
    def name(self) -> str: ...
