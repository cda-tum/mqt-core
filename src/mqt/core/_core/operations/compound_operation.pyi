from collections.abc import Sequence
from typing import overload

from ..._compat.typing import Self
from .control import Control
from .operation import Operation

class CompoundOperation(Operation):
    @overload
    def __init__(self: Self, nq: int) -> None: ...
    @overload
    def __init__(self: Self, nq: int, ops: Sequence[Operation]) -> None: ...
    def __len__(self: Self) -> int: ...
    @overload
    def __getitem__(self: Self, idx: int) -> Operation: ...
    @overload
    def __getitem__(self: Self, idx: slice) -> list[Operation]: ...
    def append(self: Self, op: Operation) -> None: ...
    def empty(self: Self) -> bool: ...
    def add_control(self: Self, control: Control) -> None: ...
    def clear_controls(self: Self) -> None: ...
    def remove_control(self: Self, control: Control) -> None: ...
    def invert(self: Self) -> None: ...
    def qasm_str(self: Self, qreg: Sequence[tuple[str, str]], creg: Sequence[tuple[str, str]]) -> str: ...
