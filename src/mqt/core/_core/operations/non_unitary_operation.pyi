from collections.abc import Sequence
from typing import overload

from ..._compat.typing import Self
from .control import Control
from .operation import Operation
from .optype import OpType

class NonUnitaryOperation(Operation):
    @property
    def classics(self: Self) -> list[int]: ...
    @overload
    def __init__(self: Self, nq: int, targets: Sequence[int], classics: Sequence[int]) -> None: ...
    @overload
    def __init__(self: Self, nq: int, target: int, classic: int) -> None: ...
    @overload
    def __init__(self: Self, nq: int, targets: Sequence[int], op_type: OpType = ...) -> None: ...
    def add_control(self: Self, control: Control) -> None: ...
    def clear_controls(self: Self) -> None: ...
    def remove_control(self: Self, control: Control) -> None: ...
    def invert(self: Self) -> None: ...
    def qasm_str(self: Self, qreg: Sequence[tuple[str, str]], creg: Sequence[tuple[str, str]]) -> str: ...
