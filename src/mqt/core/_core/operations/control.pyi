from typing import ClassVar, overload

from ..._compat.typing import Self

class Control:
    class Type:
        __members__: ClassVar[dict[Control.Type, str]]  # readonly
        Neg: ClassVar[Control.Type]  # value = <Control.Type.Neg: 0>
        Pos: ClassVar[Control.Type]  # value = <Control.Type.Pos: 1>

        def __eq__(self: Self, other: object) -> bool: ...
        def __getstate__(self: Self) -> int: ...
        def __hash__(self: Self) -> int: ...
        def __index__(self: Self) -> int: ...
        def __init__(self: Self, value: int) -> None: ...
        def __int__(self: Self) -> int: ...
        def __ne__(self: Self, other: object) -> bool: ...
        def __setstate__(self: Self, state: int) -> None: ...
        @property
        def name(self: Self) -> str: ...
        @property
        def value(self: Self) -> int: ...

    qubit: int
    type_: Type

    @overload
    def __init__(self: Self, qubit: int) -> None: ...
    @overload
    def __init__(self: Self, qubit: int, type_: Type) -> None: ...
