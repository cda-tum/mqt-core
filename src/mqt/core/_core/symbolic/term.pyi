from collections.abc import Mapping

from ..._compat.typing import Self
from .variable import Variable

class Term:
    def __init__(self: Self, variable: Variable, coefficient: float = 1.0) -> None: ...
    def __mul__(self: Self, arg0: float) -> Term: ...
    def __rmul__(self: Self, arg0: float) -> Term: ...
    def __rtruediv__(self: Self, arg0: float) -> Term: ...
    def __truediv__(self: Self, arg0: float) -> Term: ...
    def add_coefficient(self: Self, coeff: float) -> None: ...
    def evaluate(self: Self, assignment: Mapping[Variable, float]) -> float: ...
    def has_zero_coefficient(self: Self) -> bool: ...
    @property
    def coefficient(self: Self) -> float: ...
    @property
    def variable(self: Self) -> Variable: ...
