from collections.abc import Iterator, Mapping
from typing import overload

from .._compat.typing import Self
from .operations import Control

class Permutation:
    def __getitem__(self: Self, idx: int) -> int: ...
    def __iter__(self: Self) -> Iterator[tuple[int, int]]: ...
    def __setitem__(self: Self, idx: int, val: int) -> None: ...
    def __init__(self: Self, p: Mapping[int, int]) -> None: ...
    @overload
    def apply(self: Self, arg0: set[Control]) -> set[Control]: ...
    @overload
    def apply(self: Self, arg0: list[int]) -> list[int]: ...
