from typing import ClassVar, overload

class OpType:
    __members__: ClassVar[dict[OpType, int]] = ...  # read-only
    none: ClassVar[OpType] = ...
    gphase: ClassVar[OpType] = ...
    i: ClassVar[OpType] = ...
    h: ClassVar[OpType] = ...
    x: ClassVar[OpType] = ...
    y: ClassVar[OpType] = ...
    z: ClassVar[OpType] = ...
    s: ClassVar[OpType] = ...
    sdag: ClassVar[OpType] = ...
    t: ClassVar[OpType] = ...
    tdag: ClassVar[OpType] = ...
    v: ClassVar[OpType] = ...
    vdag: ClassVar[OpType] = ...
    u3: ClassVar[OpType] = ...
    u2: ClassVar[OpType] = ...
    phase: ClassVar[OpType] = ...
    sx: ClassVar[OpType] = ...
    sxdag: ClassVar[OpType] = ...
    rx: ClassVar[OpType] = ...
    ry: ClassVar[OpType] = ...
    rz: ClassVar[OpType] = ...
    swap: ClassVar[OpType] = ...
    iswap: ClassVar[OpType] = ...
    peres: ClassVar[OpType] = ...
    peresdag: ClassVar[OpType] = ...
    dcx: ClassVar[OpType] = ...
    ecr: ClassVar[OpType] = ...
    rxx: ClassVar[OpType] = ...
    ryy: ClassVar[OpType] = ...
    rzz: ClassVar[OpType] = ...
    rzx: ClassVar[OpType] = ...
    xx_minus_yy: ClassVar[OpType] = ...
    xx_plus_yy: ClassVar[OpType] = ...
    compound: ClassVar[OpType] = ...
    measure: ClassVar[OpType] = ...
    reset: ClassVar[OpType] = ...
    snapshot: ClassVar[OpType] = ...
    showprobabilities: ClassVar[OpType] = ...

    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: OpType) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
