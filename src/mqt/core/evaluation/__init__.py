"""Evaluating the json file generated by the benchmarking script."""
import json

import pandas as pd

pd.set_option('display.max_colwidth', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.width', None)

baseline = "main"
new_data = "447-add-benchmark-suite-in-mqt-core"
# Modify this according to key names in the json file

sort_options = ["ratio", "experiment"]

base_commit = "<3dshafo>"
comparing_commit = "<bf5839f>"
base_branch = "main"
comparing_branch = "447-add-benchmark-suite-in-mqt-core"
# Modify this depending on what header you want for the data table

header = pd.DataFrame()
header[base_commit] = [base_branch]
header[comparing_commit] = [comparing_branch]
header.index = [''] * len(header.index)


def higher_better(key):
    higher_better_ls = ["hits", "hit_ratio"]
    for s in higher_better_ls:
        if key.endswith(s):
            return True
    return False


def is_nested(d):
    return any(isinstance(val, dict) for val in d.values())


def flatten_dict(d, parent_key='', sep='_'):
    items = {}
    for key, value in d.items():
        new_key = f"{parent_key}{sep}{key}" if parent_key else key
        if isinstance(value, dict) and is_nested(value):
            items.update(flatten_dict(value, new_key, sep=sep))
        elif isinstance(value, dict) and not is_nested(value):
            if baseline in value:
                before = value[baseline]
            else:
                before = "skipped"
            if new_data in value:
                after = value[new_data]
            else:
                after = "skipped"
            items[new_key] = [before, after]
    return items


def compare(filename, factor=0.1, only_changed=True, sort="ratio", no_split=False):
    if factor < 0:
        raise ValueError("Factor must be positive!")
    if sort not in sort_options:
        raise ValueError("Invalid sort option!")
    with open(filename) as f:
        d = json.load(f)
    flattened_data = flatten_dict(d)

    df_improved = pd.DataFrame()
    improved_before = []
    improved_after = []
    improved_ratio = []
    improved_exp = []

    df_worsened = pd.DataFrame()
    worsened_before = []
    worsened_after = []
    worsened_ratio = []
    worsened_exp = []

    df_same = pd.DataFrame()
    same_before = []
    same_after = []
    same_ratio = []
    same_exp = []

    for k, v in flattened_data.items():
        after = v[1]
        before = v[0]
        if before in ["unused", "skipped"] or after in ["unused", "skipped"]:
            ratio = float('nan')
            same_before.append(before)
            same_after.append(after)
            same_ratio.append(ratio)
            same_exp.append(k)
            continue
        if before != 0:
            ratio = after / before
        else:
            if after == 0:
                ratio = 1
            else:
                ratio = 1e9
        if 1 - factor < ratio < 1 + factor:
            same_before.append(before)
            same_after.append(after)
            same_ratio.append(ratio)
            same_exp.append(k)
        elif (ratio < 1 - factor and not higher_better(k)) or (ratio > 1 + factor and higher_better(k)):
            improved_before.append(before)
            improved_after.append(after)
            improved_ratio.append(ratio)
            improved_exp.append(k)
        else:
            worsened_before.append(before)
            worsened_after.append(after)
            worsened_ratio.append(ratio)
            worsened_exp.append(k)

    df_improved["before"] = improved_before
    df_improved["after"] = improved_after
    df_improved["ratio"] = improved_ratio
    df_improved["experiment"] = improved_exp
    df_improved = df_improved.sort_values(by=sort)
    df_improved.index = [''] * len(df_improved.index)

    df_worsened["before"] = worsened_before
    df_worsened["after"] = worsened_after
    df_worsened["ratio"] = worsened_ratio
    df_worsened["experiment"] = worsened_exp
    df_worsened = df_worsened.sort_values(by=sort)
    df_worsened.index = [''] * len(df_worsened.index)

    df_same["before"] = same_before
    df_same["after"] = same_after
    df_same["ratio"] = same_ratio
    df_same["experiment"] = same_exp
    df_same = df_same.sort_values(by=sort)
    df_same.index = [''] * len(df_same.index)

    if no_split and not only_changed:
        df_all = pd.concat([df_improved, df_same, df_worsened], ignore_index=True)
        df_all.index = [''] * len(df_all.index)
        df_all = df_all.sort_values(by=sort)
        print("All benchmarks:")
        print(header)
        print(df_all)
        return

    if no_split and only_changed:
        df_all = pd.concat([df_improved, df_worsened], ignore_index=True)
        df_all.index = [''] * len(df_all.index)
        df_all = df_all.sort_values(by=sort)
        print("All changed benchmarks:")
        print(header)
        print(df_all)
        return

    print("Benchmarks that have improved:")
    print(header)
    print(df_improved)

    if not only_changed:
        print("Benchmarks that have stayed the same:")
        print(header)
        print(df_same)

    print("Benchmarks that have worsened:")
    print(header)
    print(df_worsened)
