"""Evaluating the json file generated by the benchmarking script."""

from __future__ import annotations

import json
from pathlib import Path
from typing import Any

import pandas as pd

pd.set_option("display.max_colwidth", None)
pd.set_option("display.max_rows", None)
pd.set_option("display.width", None)

sort_options = ["ratio", "experiment"]


def __higher_better(key: str) -> bool:
    """Return whether a higher value is better for the given key."""
    higher_better_ls = ["hits", "hit_ratio"]
    return any(key.endswith(s) for s in higher_better_ls)


def __flatten_dict(d: dict[Any, Any], parent_key: str = "", sep: str = "_") -> dict[str, Any]:
    """Flatten a nested dictionary."""
    items = {}
    for key, value in d.items():
        new_key = f"{parent_key}{sep}{key}" if parent_key else key
        if isinstance(value, dict):
            items.update(__flatten_dict(value, new_key, sep=sep))
        else:
            items[new_key] = value
    return items


def compare(
    baseline_filepath: str,
    feature_filepath: str,
    factor: float = 0.1,
    only_changed: bool = True,
    sort: str = "ratio",
    no_split: bool = False,
) -> None:
    """Compare the results of two benchmarking runs from the generated json file.

    :param baseline_filepath: Path to the baseline json file.
    :param feature_filepath: Path to the feature json file.
    :param factor: How much a result has to change to be considered significant.
    :param only_changed: Whether to only show results that changed significantly.
    :param sort: Sort the table by this column. Valid options are "ratio" and "experiment".
    :param no_split: Whether to merge all results together in one table or to separate the results into benchmarks that improved, stayed the same, or worsened.
    """
    if factor < 0:
        msg = "Factor must be positive!"
        raise ValueError(msg)
    if sort not in sort_options:
        msg = "Invalid sort option!"
        raise ValueError(msg)
    base_path = Path(baseline_filepath)
    with base_path.open(mode="r", encoding="utf-8") as f:
        d = json.load(f)
    flattened_data = __flatten_dict(d)
    feature_path = Path(feature_filepath)
    with feature_path.open(mode="r", encoding="utf-8") as f:
        d_feature = json.load(f)
    flattened_feature = __flatten_dict(d_feature)

    for k, v in flattened_data.items():
        if k in flattened_feature:
            ls = [v, flattened_feature[k]]
            flattened_data[k] = ls
            del flattened_feature[k]
        else:
            ls = [v, "skipped"]
            flattened_data[k] = ls
    for k, v in flattened_feature.items():
        ls = ["skipped", v]
        flattened_data[k] = ls

    df_improved = pd.DataFrame()
    improved_before = []
    improved_after = []
    improved_ratio = []
    improved_exp = []

    df_worsened = pd.DataFrame()
    worsened_before = []
    worsened_after = []
    worsened_ratio = []
    worsened_exp = []

    df_same = pd.DataFrame()
    same_before = []
    same_after = []
    same_ratio = []
    same_exp = []

    for k, v in flattened_data.items():
        after = v[1]
        before = v[0]
        if before in {"unused", "skipped"} or after in {"unused", "skipped"}:
            ratio = float("nan")
            same_before.append(before)
            same_after.append(after)
            same_ratio.append(ratio)
            same_exp.append(k)
            continue
        ratio = after / before if before != 0 else 1 if after == 0 else 1000000000.0
        if 1 - factor < ratio < 1 + factor:
            same_before.append(before)
            same_after.append(after)
            same_ratio.append(ratio)
            same_exp.append(k)
        elif (ratio < 1 - factor and not __higher_better(k)) or (ratio > 1 + factor and __higher_better(k)):
            improved_before.append(before)
            improved_after.append(after)
            improved_ratio.append(ratio)
            improved_exp.append(k)
        else:
            worsened_before.append(before)
            worsened_after.append(after)
            worsened_ratio.append(ratio)
            worsened_exp.append(k)

    df_improved["before"] = improved_before
    df_improved["after"] = improved_after
    df_improved["ratio"] = improved_ratio
    df_improved["experiment"] = improved_exp
    df_improved = df_improved.sort_values(by=sort)
    df_improved.index = pd.Index([""] * len(df_improved.index))

    df_worsened["before"] = worsened_before
    df_worsened["after"] = worsened_after
    df_worsened["ratio"] = worsened_ratio
    df_worsened["experiment"] = worsened_exp
    df_worsened = df_worsened.sort_values(by=sort)
    df_worsened.index = pd.Index([""] * len(df_worsened.index))

    df_same["before"] = same_before
    df_same["after"] = same_after
    df_same["ratio"] = same_ratio
    df_same["experiment"] = same_exp
    df_same = df_same.sort_values(by=sort)
    df_same.index = pd.Index([""] * len(df_same.index))

    if no_split and not only_changed:
        df_all = pd.concat([df_improved, df_same, df_worsened], ignore_index=True)
        df_all.index = pd.Index([""] * len(df_all.index))
        df_all = df_all.sort_values(by=sort)
        print(f"All benchmarks:\n{df_all}")  # noqa: T201
        return

    if no_split and only_changed:
        df_all = pd.concat([df_improved, df_worsened], ignore_index=True)
        df_all.index = pd.Index([""] * len(df_all.index))
        df_all = df_all.sort_values(by=sort)
        print("All changed benchmarks:")  # noqa: T201
        print(df_all)  # noqa: T201
        return
    print("Benchmarks that have improved:")  # noqa: T201
    print(df_improved)  # noqa: T201

    if not only_changed:
        print("Benchmarks that have stayed the same:")  # noqa: T201
        print(df_same)  # noqa: T201
    print("Benchmarks that have worsened:")  # noqa: T201
    print(df_worsened)  # noqa: T201
